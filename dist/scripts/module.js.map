{"version":3,"file":"module.js","sources":["../../src/scripts/module.js"],"sourcesContent":["Hooks.once('init', () => {\n  console.log(\"This code runs once on initialization\");\n})\n\nHooks.once('ready', () => {\n  // This code runs once when Foundry is ready\n  console.log(\"This code runs once core initialization is ready and game data is available\");\n  game?.socket.on('module.goblins-cauldron-foundry-module', handleSocketEvent);\n});\n\n\nfunction handleSocketEvent({ eventType, payload }) {\n  console.log('eventType ', eventType, ' payload ', payload);\n\n  switch (eventType) {\n    case \"UPDATE_CHARACTER\": {\n      handleUpdateCharacterSheet(payload);\n      break\n    }\n    case \"SEND_TO_CHAT\": {\n      handleSendToChat(payload);\n      break\n    }\n    case \"ROLL_DICE\": {\n      handleDiceRoll(payload);\n      break\n    }\n    default:\n      //throw new Error('unknown event type');\n      console.log('unknown event type')\n  }\n}\n\n// Listen for 'updateActor' events from the server\nfunction handleUpdateCharacterSheet(payload) {\n  \n  // Get the actor\n  const actor = [...game.actors?.keys()].map((key) => {\n    return game.actors?.get(key)\n  }).find((x) => {\n    return x?.name === payload.actorName\n  })\n\n  if (!actor) {\n    console.log(`Actor with id ${actor?._id} does not exist.`);\n    return;\n  }\n\n  // Update the actor data\n  actor.update(payload.data);\n\n  console.log('Actor ', payload.data.name, ' - with ID ', actor._id, ' successfully updated!');\n}\n\nfunction handleSendToChat(payload) {\n  const actor = [...game?.actors?.keys()].map((key) => {\n    return game?.actors?.get(key)\n  }).find((x) => {\n    return x?.name === payload.actorName\n  })\n\n  if (!actor) {\n    console.log(`Actor with id ${actor?._id} does not exist.`);\n    return;\n  }\n\n  ChatMessage.create({\n    user: game?.user?._id,\n    speaker: ChatMessage.getSpeaker(),\n    content: payload.chatMessage\n  });\n}\n\nfunction handleDiceRoll(payload) {\n  console.log(`Rolling ${payload.count}d${payload.diceType}`);\n\n  const formula = payload.count + \"d\" + payload.diceType;\n  const roll = new Roll(formula);\n\n  roll.toMessage({\n    user: game?.user?._id\n  })\n}"],"names":["handleSocketEvent","eventType","payload","handleUpdateCharacterSheet","handleSendToChat","handleDiceRoll","_a","actor","key","x","_b","formula"],"mappings":"AAAA,MAAM,KAAK,OAAQ,IAAM,CACvB,QAAQ,IAAI,uCAAuC,CACrD,CAAC,EAED,MAAM,KAAK,QAAS,IAAM,CAExB,QAAQ,IAAI,6EAA6E,EACzF,iBAAM,OAAO,GAAG,yCAA0CA,EAC5D,CAAC,EAGD,SAASA,EAAkB,CAAE,UAAAC,EAAW,QAAAC,GAAW,CAGjD,OAFA,QAAQ,IAAI,aAAcD,EAAW,YAAaC,CAAO,EAEjDD,EAAS,CACf,IAAK,mBAAoB,CACvBE,EAA2BD,CAAO,EAClC,KACN,CACI,IAAK,eAAgB,CACnBE,EAAiBF,CAAO,EACxB,KACN,CACI,IAAK,YAAa,CAChBG,EAAeH,CAAO,EACtB,KACN,CACI,QAEE,QAAQ,IAAI,oBAAoB,CACtC,CACA,CAGA,SAASC,EAA2BD,EAAS,CAlC7C,IAAAI,EAqCE,MAAMC,EAAQ,CAAC,IAAGD,EAAA,KAAK,SAAL,YAAAA,EAAa,MAAM,EAAE,IAAKE,GAAQ,CArCtD,IAAAF,EAsCI,OAAOA,EAAA,KAAK,SAAL,YAAAA,EAAa,IAAIE,EAC5B,CAAG,EAAE,KAAMC,IACAA,GAAA,YAAAA,EAAG,QAASP,EAAQ,SAC5B,EAED,GAAI,CAACK,EAAO,CACV,QAAQ,IAAI,iBAAiBA,GAAA,YAAAA,EAAO,GAAG,kBAAkB,EACzD,MACJ,CAGEA,EAAM,OAAOL,EAAQ,IAAI,EAEzB,QAAQ,IAAI,SAAUA,EAAQ,KAAK,KAAM,cAAeK,EAAM,IAAK,wBAAwB,CAC7F,CAEA,SAASH,EAAiBF,EAAS,CAtDnC,IAAAI,EAAAI,EAuDE,MAAMH,EAAQ,CAAC,IAAGD,EAAA,uBAAM,SAAN,YAAAA,EAAc,MAAM,EAAE,IAAKE,GAAQ,CAvDvD,IAAAF,EAwDI,OAAOA,EAAA,uBAAM,SAAN,YAAAA,EAAc,IAAIE,EAC7B,CAAG,EAAE,KAAMC,IACAA,GAAA,YAAAA,EAAG,QAASP,EAAQ,SAC5B,EAED,GAAI,CAACK,EAAO,CACV,QAAQ,IAAI,iBAAiBA,GAAA,YAAAA,EAAO,GAAG,kBAAkB,EACzD,MACJ,CAEE,YAAY,OAAO,CACjB,MAAMG,EAAA,uBAAM,OAAN,YAAAA,EAAY,IAClB,QAAS,YAAY,WAAY,EACjC,QAASR,EAAQ,WACrB,CAAG,CACH,CAEA,SAASG,EAAeH,EAAS,CAzEjC,IAAAI,EA0EE,QAAQ,IAAI,WAAWJ,EAAQ,KAAK,IAAIA,EAAQ,QAAQ,EAAE,EAE1D,MAAMS,EAAUT,EAAQ,MAAQ,IAAMA,EAAQ,SACjC,IAAI,KAAKS,CAAO,EAExB,UAAU,CACb,MAAML,EAAA,uBAAM,OAAN,YAAAA,EAAY,GACnB,CAAA,CACH"}